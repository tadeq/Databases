CREATE OR REPLACE TRIGGER dodanie_rezerwacji
  AFTER INSERT
  ON REZERWACJE
  FOR EACH ROW
  DECLARE
    nr_rez NUMBER;
    st     CHAR;
    id_wyc NUMBER;
  BEGIN
    nr_rez := :NEW.NR_REZERWACJI;
    st := :NEW.STATUS;
    id_wyc := :NEW.ID_WYCIECZKI;
    INSERT INTO REZERWACJE_LOG (NR_REZERWACJI, DATA, STATUS) VALUES (nr_rez, SYSDATE, st);
    UPDATE WYCIECZKI SET LICZBA_WOLNYCH_MIEJSC = LICZBA_WOLNYCH_MIEJSC + 1 WHERE ID_WYCIECZKI = id_wyc;
  end;


CREATE OR REPLACE TRIGGER zmiana_statusu
  AFTER UPDATE
  ON REZERWACJE
  FOR EACH ROW
  DECLARE
    nr_rez NUMBER;
    n_st   CHAR;
    o_st   CHAR;
    id_wyc NUMBER;
  BEGIN
    nr_rez := :NEW.NR_REZERWACJI;
    n_st := :NEW.STATUS;
    o_st := :OLD.STATUS;
    id_wyc := :NEW.ID_WYCIECZKI;
    INSERT INTO REZERWACJE_LOG (REZERWACJE_LOG.NR_REZERWACJI, DATA, REZERWACJE_LOG.STATUS)
    VALUES (nr_rez, SYSDATE, n_st);
    IF o_st in ('P', 'Z', 'N') AND n_st = 'A'
    THEN
      UPDATE WYCIECZKI SET LICZBA_WOLNYCH_MIEJSC = LICZBA_WOLNYCH_MIEJSC + 1 WHERE ID_WYCIECZKI = id_wyc;
    ELSIF o_st = 'A' AND n_st in ('P', 'Z', 'N')
      THEN
        UPDATE WYCIECZKI SET LICZBA_WOLNYCH_MIEJSC = LICZBA_WOLNYCH_MIEJSC - 1 WHERE ID_WYCIECZKI = id_wyc;
    end if;
  end;


CREATE OR REPLACE TRIGGER usuniecie_rezerwacji
  BEFORE DELETE
  ON REZERWACJE
  BEGIN
    RAISE_APPLICATION_ERROR(-20001, 'Nie można usunąć rezerwacji');
  end;


CREATE OR REPLACE TRIGGER zmiana_liczby_miejsc
  AFTER UPDATE
  ON WYCIECZKI
  FOR EACH ROW
  BEGIN
    UPDATE WYCIECZKI
    SET LICZBA_WOLNYCH_MIEJSC = :OLD.LICZBA_WOLNYCH_MIEJSC - (:OLD.LICZBA_MIEJSC - :NEW.LICZBA_MIEJSC)
    WHERE ID_WYCIECZKI = :OLD.ID_WYCIECZKI;
  end;
